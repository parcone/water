{"ast":null,"code":"import { ref, computed, onMounted, onBeforeUnmount } from 'vue';\nimport { Loading } from '@element-plus/icons-vue';\nimport preloader from '@/utils/preload';\n\n// 使用require.context一次性加载所有图片\nfunction loadAllImages() {\n  const allImages = {};\n  try {\n    // 精确匹配您的路径\n    const requireImages = require.context('../assets/water/photos', false, /\\.(png|jpg|jpeg|gif)$/i);\n    console.log('发现的图片文件:', requireImages.keys());\n    requireImages.keys().forEach(key => {\n      // key格式: \"./2025_01_SSM_20250101.png\"\n      const filename = key.replace('./', '');\n      allImages[filename] = requireImages(key);\n    });\n    console.log('成功加载的图片:', Object.keys(allImages));\n    return allImages;\n  } catch (error) {\n    console.error('加载图片失败:', error);\n    return {};\n  }\n}\n\n// 解析文件名中的日期信息\nfunction parseImageFilename(filename) {\n  // 匹配格式: 2025_01_SSM_20250101.png\n  const match = filename.match(/(\\d{4})_(\\d{2})_\\w+_(\\d{8})/);\n  if (match) {\n    const [, year, month, dateStr] = match;\n    const fullYear = dateStr.substring(0, 4);\n    const fullMonth = dateStr.substring(4, 6);\n    const day = dateStr.substring(6, 8);\n    return {\n      filename,\n      year: parseInt(fullYear),\n      month: parseInt(fullMonth),\n      day: parseInt(day),\n      displayName: `${fullYear}年${fullMonth}月${day}日`,\n      sortKey: parseInt(dateStr)\n    };\n  }\n\n  // 备用解析方案\n  const basicMatch = filename.match(/(\\d{4})_(\\d{2})/);\n  if (basicMatch) {\n    const [, year, month] = basicMatch;\n    return {\n      filename,\n      year: parseInt(year),\n      month: parseInt(month),\n      day: 1,\n      displayName: `${year}年${month}月`,\n      sortKey: parseInt(year) * 10000 + parseInt(month) * 100\n    };\n  }\n\n  // 如果无法解析，使用文件名\n  return {\n    filename,\n    year: 2025,\n    month: 1,\n    day: 1,\n    displayName: filename.replace(/\\.(png|jpg|jpeg|gif)$/i, ''),\n    sortKey: 0\n  };\n}\nexport default {\n  name: 'PhotoTimeline',\n  components: {\n    Loading\n  },\n  data() {\n    return {\n      photos: [],\n      currentIndex: 0,\n      isPlaying: false,\n      playSpeed: 2000,\n      playInterval: null,\n      isLoading: false,\n      allImages: {},\n      preloadProgress: 0\n    };\n  },\n  computed: {\n    currentPhoto() {\n      return this.photos[this.currentIndex] || null;\n    },\n    nextPhotos() {\n      const start = this.currentIndex + 1;\n      const end = Math.min(start + 3, this.photos.length);\n      return this.photos.slice(start, end);\n    }\n  },\n  watch: {\n    currentIndex(newIndex) {\n      // 预加载下一批图片\n      this.preloadNextBatch();\n    }\n  },\n  async mounted() {\n    await this.initializeComponent();\n  },\n  beforeUnmount() {\n    this.stopPlay();\n  },\n  methods: {\n    async initializeComponent() {\n      this.isLoading = true;\n      try {\n        // 加载所有图片\n        this.allImages = loadAllImages();\n\n        // 生成照片数据\n        await this.generatePhotoData();\n\n        // 预加载第一批图片\n        await this.preloadInitialBatch();\n        console.log(`初始化完成，共加载 ${this.photos.length} 张图片`);\n      } catch (error) {\n        console.error('初始化失败:', error);\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    async generatePhotoData() {\n      const imageFilenames = Object.keys(this.allImages);\n      if (imageFilenames.length === 0) {\n        console.warn('没有找到图片文件');\n        return;\n      }\n\n      // 解析并排序图片\n      this.photos = imageFilenames.map(filename => parseImageFilename(filename)).sort((a, b) => a.sortKey - b.sortKey);\n      console.log('图片排序完成:', this.photos.map(p => p.displayName));\n    },\n    async preloadInitialBatch() {\n      const initialBatch = this.photos.slice(0, 5); // 预加载前5张图片\n      await this.preloadImages(initialBatch);\n    },\n    async preloadNextBatch() {\n      if (this.nextPhotos.length > 0) {\n        await this.preloadImages(this.nextPhotos);\n      }\n    },\n    async preloadImages(photos) {\n      const urls = photos.map(photo => this.getImageUrl(photo.filename));\n      try {\n        await preloader.loadMultiple(urls, {\n          onProgress: ({\n            percent\n          }) => {\n            this.preloadProgress = percent;\n          }\n        });\n      } catch (error) {\n        console.error('预加载图片失败:', error);\n      }\n    },\n    getImageUrl(filename) {\n      if (!filename || !this.allImages[filename]) {\n        console.warn('图片不存在:', filename);\n        return '';\n      }\n      return this.allImages[filename];\n    },\n    onSliderChange(event) {\n      const newIndex = parseInt(event.target.value);\n      if (newIndex >= 0 && newIndex < this.photos.length) {\n        this.currentIndex = newIndex;\n        this.stopPlay();\n      }\n    },\n    playPause() {\n      if (this.isPlaying) {\n        this.stopPlay();\n      } else {\n        this.startPlay();\n      }\n    },\n    startPlay() {\n      if (this.photos.length === 0) return;\n      this.isPlaying = true;\n      this.playInterval = setInterval(() => {\n        this.currentIndex = (this.currentIndex + 1) % this.photos.length;\n      }, this.playSpeed);\n    },\n    stopPlay() {\n      this.isPlaying = false;\n      if (this.playInterval) {\n        clearInterval(this.playInterval);\n        this.playInterval = null;\n      }\n    },\n    updatePlaySpeed() {\n      if (this.isPlaying) {\n        this.stopPlay();\n        this.startPlay();\n      }\n    },\n    reset() {\n      this.stopPlay();\n      this.currentIndex = 0;\n    },\n    onImageLoad() {\n      // 图片加载成功\n    },\n    onImageError(event) {\n      console.error('图片加载失败:', this.currentPhoto?.filename);\n      console.error('错误详情:', event);\n    }\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","onBeforeUnmount","Loading","preloader","loadAllImages","allImages","requireImages","require","context","console","log","keys","forEach","key","filename","replace","Object","error","parseImageFilename","match","year","month","dateStr","fullYear","substring","fullMonth","day","parseInt","displayName","sortKey","basicMatch","name","components","data","photos","currentIndex","isPlaying","playSpeed","playInterval","isLoading","preloadProgress","currentPhoto","nextPhotos","start","end","Math","min","length","slice","watch","newIndex","preloadNextBatch","mounted","initializeComponent","beforeUnmount","stopPlay","methods","generatePhotoData","preloadInitialBatch","imageFilenames","warn","map","sort","a","b","p","initialBatch","preloadImages","urls","photo","getImageUrl","loadMultiple","onProgress","percent","onSliderChange","event","target","value","playPause","startPlay","setInterval","clearInterval","updatePlaySpeed","reset","onImageLoad","onImageError"],"sources":["D:\\restore\\water-melt\\frontend\\src\\components\\PhotoTimeline.vue"],"sourcesContent":["<template>\n  <div class=\"photo-timeline\">\n    <div class=\"timeline-header\">\n      <h2>图片时间轴</h2>\n      <div class=\"controls\">\n        <button @click=\"playPause\" class=\"control-btn\">\n          {{ isPlaying ? '⏸️ 暂停' : '▶️ 播放' }}\n        </button>\n        <button @click=\"reset\" class=\"control-btn\">🔄 重置</button>\n        <div class=\"speed-control\">\n          <label>速度:</label>\n          <select v-model=\"playSpeed\" @change=\"updatePlaySpeed\">\n            <option value=\"500\">0.5秒</option>\n            <option value=\"1000\">1秒</option>\n            <option value=\"2000\">2秒</option>\n            <option value=\"3000\">3秒</option>\n          </select>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"image-container\">\n      <div v-if=\"currentPhoto\" class=\"image-wrapper\">\n        <img\n            :src=\"getImageUrl(currentPhoto.filename)\"\n            :alt=\"currentPhoto.displayName\"\n            class=\"timeline-image\"\n            @load=\"onImageLoad\"\n            @error=\"onImageError\"\n        />\n        <div class=\"image-info\">\n          <div class=\"date-info\">{{ currentPhoto.displayName }}</div>\n          <div class=\"progress-info\">{{ currentIndex + 1 }} / {{ photos.length }}</div>\n        </div>\n      </div>\n      <div v-else class=\"no-image\">\n        <p>{{ isLoading ? '加载中...' : '暂无图片数据' }}</p>\n      </div>\n    </div>\n\n    <div class=\"timeline-slider\">\n      <div class=\"slider-container\">\n        <input\n            type=\"range\"\n            :min=\"0\"\n            :max=\"Math.max(0, photos.length - 1)\"\n            :value=\"currentIndex\"\n            @input=\"onSliderChange\"\n            class=\"timeline-range\"\n            :disabled=\"photos.length === 0\"\n        />\n        <div class=\"slider-labels\">\n          <span v-if=\"photos.length > 0\">{{ photos[0]?.displayName }}</span>\n          <span v-if=\"photos.length > 1\">{{ photos[photos.length - 1]?.displayName }}</span>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"timeline-info\">\n      <div class=\"info-item\">\n        <span class=\"label\">当前时间:</span>\n        <span class=\"value\">{{ currentPhoto?.displayName || '无' }}</span>\n      </div>\n      <div class=\"info-item\">\n        <span class=\"label\">总图片数:</span>\n        <span class=\"value\">{{ photos.length }}</span>\n      </div>\n      <div class=\"info-item\">\n        <span class=\"label\">播放状态:</span>\n        <span class=\"value\">{{ isPlaying ? '播放中' : '已暂停' }}</span>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, computed, onMounted, onBeforeUnmount } from 'vue'\nimport { Loading } from '@element-plus/icons-vue'\nimport preloader from '@/utils/preload'\n\n// 使用require.context一次性加载所有图片\nfunction loadAllImages() {\n  const allImages = {}\n\n  try {\n    // 精确匹配您的路径\n    const requireImages = require.context('../assets/water/photos', false, /\\.(png|jpg|jpeg|gif)$/i)\n\n    console.log('发现的图片文件:', requireImages.keys())\n\n    requireImages.keys().forEach(key => {\n      // key格式: \"./2025_01_SSM_20250101.png\"\n      const filename = key.replace('./', '')\n      allImages[filename] = requireImages(key)\n    })\n\n    console.log('成功加载的图片:', Object.keys(allImages))\n    return allImages\n  } catch (error) {\n    console.error('加载图片失败:', error)\n    return {}\n  }\n}\n\n// 解析文件名中的日期信息\nfunction parseImageFilename(filename) {\n  // 匹配格式: 2025_01_SSM_20250101.png\n  const match = filename.match(/(\\d{4})_(\\d{2})_\\w+_(\\d{8})/)\n\n  if (match) {\n    const [, year, month, dateStr] = match\n    const fullYear = dateStr.substring(0, 4)\n    const fullMonth = dateStr.substring(4, 6)\n    const day = dateStr.substring(6, 8)\n\n    return {\n      filename,\n      year: parseInt(fullYear),\n      month: parseInt(fullMonth),\n      day: parseInt(day),\n      displayName: `${fullYear}年${fullMonth}月${day}日`,\n      sortKey: parseInt(dateStr)\n    }\n  }\n\n  // 备用解析方案\n  const basicMatch = filename.match(/(\\d{4})_(\\d{2})/)\n  if (basicMatch) {\n    const [, year, month] = basicMatch\n    return {\n      filename,\n      year: parseInt(year),\n      month: parseInt(month),\n      day: 1,\n      displayName: `${year}年${month}月`,\n      sortKey: parseInt(year) * 10000 + parseInt(month) * 100\n    }\n  }\n\n  // 如果无法解析，使用文件名\n  return {\n    filename,\n    year: 2025,\n    month: 1,\n    day: 1,\n    displayName: filename.replace(/\\.(png|jpg|jpeg|gif)$/i, ''),\n    sortKey: 0\n  }\n}\n\nexport default {\n  name: 'PhotoTimeline',\n  components: {\n    Loading\n  },\n  data() {\n    return {\n      photos: [],\n      currentIndex: 0,\n      isPlaying: false,\n      playSpeed: 2000,\n      playInterval: null,\n      isLoading: false,\n      allImages: {},\n      preloadProgress: 0\n    }\n  },\n  computed: {\n    currentPhoto() {\n      return this.photos[this.currentIndex] || null\n    },\n    nextPhotos() {\n      const start = this.currentIndex + 1\n      const end = Math.min(start + 3, this.photos.length)\n      return this.photos.slice(start, end)\n    }\n  },\n  watch: {\n    currentIndex(newIndex) {\n      // 预加载下一批图片\n      this.preloadNextBatch()\n    }\n  },\n  async mounted() {\n    await this.initializeComponent()\n  },\n  beforeUnmount() {\n    this.stopPlay()\n  },\n  methods: {\n    async initializeComponent() {\n      this.isLoading = true\n\n      try {\n        // 加载所有图片\n        this.allImages = loadAllImages()\n\n        // 生成照片数据\n        await this.generatePhotoData()\n\n        // 预加载第一批图片\n        await this.preloadInitialBatch()\n\n        console.log(`初始化完成，共加载 ${this.photos.length} 张图片`)\n      } catch (error) {\n        console.error('初始化失败:', error)\n      } finally {\n        this.isLoading = false\n      }\n    },\n\n    async generatePhotoData() {\n      const imageFilenames = Object.keys(this.allImages)\n\n      if (imageFilenames.length === 0) {\n        console.warn('没有找到图片文件')\n        return\n      }\n\n      // 解析并排序图片\n      this.photos = imageFilenames\n          .map(filename => parseImageFilename(filename))\n          .sort((a, b) => a.sortKey - b.sortKey)\n\n      console.log('图片排序完成:', this.photos.map(p => p.displayName))\n    },\n\n    async preloadInitialBatch() {\n      const initialBatch = this.photos.slice(0, 5) // 预加载前5张图片\n      await this.preloadImages(initialBatch)\n    },\n\n    async preloadNextBatch() {\n      if (this.nextPhotos.length > 0) {\n        await this.preloadImages(this.nextPhotos)\n      }\n    },\n\n    async preloadImages(photos) {\n      const urls = photos.map(photo => this.getImageUrl(photo.filename))\n      try {\n        await preloader.loadMultiple(urls, {\n          onProgress: ({ percent }) => {\n            this.preloadProgress = percent\n          }\n        })\n      } catch (error) {\n        console.error('预加载图片失败:', error)\n      }\n    },\n\n    getImageUrl(filename) {\n      if (!filename || !this.allImages[filename]) {\n        console.warn('图片不存在:', filename)\n        return ''\n      }\n\n      return this.allImages[filename]\n    },\n\n    onSliderChange(event) {\n      const newIndex = parseInt(event.target.value)\n      if (newIndex >= 0 && newIndex < this.photos.length) {\n        this.currentIndex = newIndex\n        this.stopPlay()\n      }\n    },\n\n    playPause() {\n      if (this.isPlaying) {\n        this.stopPlay()\n      } else {\n        this.startPlay()\n      }\n    },\n\n    startPlay() {\n      if (this.photos.length === 0) return\n\n      this.isPlaying = true\n      this.playInterval = setInterval(() => {\n        this.currentIndex = (this.currentIndex + 1) % this.photos.length\n      }, this.playSpeed)\n    },\n\n    stopPlay() {\n      this.isPlaying = false\n      if (this.playInterval) {\n        clearInterval(this.playInterval)\n        this.playInterval = null\n      }\n    },\n\n    updatePlaySpeed() {\n      if (this.isPlaying) {\n        this.stopPlay()\n        this.startPlay()\n      }\n    },\n\n    reset() {\n      this.stopPlay()\n      this.currentIndex = 0\n    },\n\n    onImageLoad() {\n      // 图片加载成功\n    },\n\n    onImageError(event) {\n      console.error('图片加载失败:', this.currentPhoto?.filename)\n      console.error('错误详情:', event)\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.photo-timeline {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  background: rgba(0, 0, 0, 0.2);\n  border-radius: 8px;\n  overflow: hidden;\n\n  .timeline-header {\n    padding: 16px;\n    border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n    \n    h2 {\n      display: none; // 隐藏重复的标题\n    }\n    \n    .controls {\n      display: flex;\n      align-items: center;\n      gap: 12px;\n      \n      .control-btn {\n        background: rgba(255, 255, 255, 0.1);\n        border: 1px solid rgba(255, 255, 255, 0.2);\n        color: #fff;\n        padding: 6px 12px;\n        border-radius: 4px;\n        cursor: pointer;\n        transition: all 0.3s ease;\n        \n        &:hover {\n          background: rgba(255, 255, 255, 0.2);\n        }\n      }\n      \n      .speed-control {\n        display: flex;\n        align-items: center;\n        gap: 8px;\n        \n        label {\n          color: rgba(255, 255, 255, 0.7);\n        }\n        \n        select {\n          background: rgba(255, 255, 255, 0.1);\n          border: 1px solid rgba(255, 255, 255, 0.2);\n          color: #fff;\n          padding: 4px 8px;\n          border-radius: 4px;\n          cursor: pointer;\n          \n          option {\n            background: #1a1a1a;\n            color: #fff;\n          }\n        }\n      }\n    }\n  }\n\n  .image-container {\n    flex: 1;\n    position: relative;\n    overflow: hidden;\n    \n    .image-wrapper {\n      height: 100%;\n      position: relative;\n      \n      .timeline-image {\n        width: 100%;\n        height: 100%;\n        object-fit: cover;\n      }\n      \n      .image-info {\n        position: absolute;\n        bottom: 0;\n        left: 0;\n        right: 0;\n        padding: 12px;\n        background: rgba(0, 0, 0, 0.7);\n        backdrop-filter: blur(10px);\n        color: #fff;\n        \n        .date-info {\n          font-size: 14px;\n          margin-bottom: 4px;\n        }\n        \n        .progress-info {\n          font-size: 12px;\n          color: rgba(255, 255, 255, 0.7);\n        }\n      }\n    }\n    \n    .no-image {\n      height: 100%;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      color: rgba(255, 255, 255, 0.5);\n    }\n  }\n\n  .timeline-slider {\n    padding: 16px;\n    border-top: 1px solid rgba(255, 255, 255, 0.1);\n    \n    .slider-container {\n      .timeline-range {\n        width: 100%;\n        height: 4px;\n        background: rgba(255, 255, 255, 0.1);\n        border-radius: 2px;\n        outline: none;\n        -webkit-appearance: none;\n        \n        &::-webkit-slider-thumb {\n          -webkit-appearance: none;\n          width: 12px;\n          height: 12px;\n          background: #40a9ff;\n          border-radius: 50%;\n          cursor: pointer;\n          transition: all 0.3s ease;\n          \n          &:hover {\n            transform: scale(1.2);\n          }\n        }\n      }\n      \n      .slider-labels {\n        display: flex;\n        justify-content: space-between;\n        margin-top: 8px;\n        font-size: 12px;\n        color: rgba(255, 255, 255, 0.5);\n      }\n    }\n  }\n\n  .timeline-info {\n    padding: 16px;\n    border-top: 1px solid rgba(255, 255, 255, 0.1);\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    gap: 12px;\n    \n    .info-item {\n      .label {\n        color: rgba(255, 255, 255, 0.5);\n        font-size: 12px;\n        margin-bottom: 4px;\n        display: block;\n      }\n      \n      .value {\n        color: #fff;\n        font-size: 14px;\n      }\n    }\n  }\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}