{"ast":null,"code":"import { toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"span\", {\n    class: _normalizeClass([\"animated-number\", {\n      'animated-number--positive': Number($setup.displayValue) > 0,\n      'animated-number--negative': Number($setup.displayValue) < 0\n    }])\n  }, _toDisplayString($setup.displayValue), 3 /* TEXT, CLASS */);\n}","map":{"version":3,"names":["_createElementBlock","class","_normalizeClass","Number","$setup","displayValue"],"sources":["D:\\restore\\water-melt\\frontend\\src\\components\\AnimatedNumber.vue"],"sourcesContent":["<template>\r\n  <span \r\n    class=\"animated-number\" \r\n    :class=\"{\r\n      'animated-number--positive': Number(displayValue) > 0,\r\n      'animated-number--negative': Number(displayValue) < 0\r\n    }\">\r\n    {{ displayValue }}\r\n  </span>\r\n</template>\r\n\r\n<script>\r\nimport { ref, watch, onMounted } from 'vue'\r\nimport numeral from 'numeral'\r\n\r\nexport default {\r\n  name: 'AnimatedNumber',\r\n  props: {\r\n    value: {\r\n      type: [Number, String],\r\n      required: true\r\n    },\r\n    duration: {\r\n      type: Number,\r\n      default: 1000\r\n    },\r\n    format: {\r\n      type: String,\r\n      default: ''\r\n    }\r\n  },\r\n  setup(props) {\r\n    const displayValue = ref(props.value)\r\n\r\n    function animateNumber(start, end, duration) {\r\n      const startTime = performance.now()\r\n      \r\n      function update(currentTime) {\r\n        const elapsed = currentTime - startTime\r\n        const progress = Math.min(elapsed / duration, 1)\r\n        const currentValue = start + (end - start) * progress\r\n\r\n        displayValue.value = props.format \r\n          ? numeral(currentValue).format(props.format)\r\n          : currentValue.toFixed(2)\r\n\r\n        if (progress < 1) {\r\n          requestAnimationFrame(update)\r\n        }\r\n      }\r\n\r\n      requestAnimationFrame(update)\r\n    }\r\n\r\n    watch(() => props.value, (newValue, oldValue) => {\r\n      animateNumber(Number(oldValue), Number(newValue), props.duration)\r\n    })\r\n\r\n    onMounted(() => {\r\n      displayValue.value = props.format \r\n        ? numeral(props.value).format(props.format)\r\n        : props.value\r\n    })\r\n\r\n    return {\r\n      displayValue\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.animated-number {\r\n  display: inline-block;\r\n  transition: color 0.3s ease;\r\n  font-weight: bold;\r\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\r\n  color: var(--background-dark);\r\n\r\n  &--positive {\r\n    color: var(--secondary-color);\r\n  }\r\n\r\n  &--negative {\r\n    color: var(--accent-color);\r\n  }\r\n}\r\n\r\n@media (prefers-color-scheme: dark) {\r\n  .animated-number {\r\n    color: #ffffff;\r\n\r\n    &--positive {\r\n      color: var(--secondary-color);\r\n    }\r\n\r\n    &--negative {\r\n      color: var(--accent-color);\r\n    }\r\n  }\r\n}\r\n</style> "],"mappings":";;uBACEA,mBAAA,CAOO;IANLC,KAAK,EAAAC,eAAA,EAAC,iBAAiB;mCACuBC,MAAM,CAACC,MAAA,CAAAC,YAAY;mCAA2CF,MAAM,CAACC,MAAA,CAAAC,YAAY;;sBAI5HD,MAAA,CAAAC,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}