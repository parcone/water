{"ast":null,"code":"class Cache {\n  constructor(prefix = 'app_cache_') {\n    this.prefix = prefix;\n    this.storage = window.localStorage;\n  }\n\n  /**\r\n   * 设置缓存\r\n   * @param {string} key - 缓存键\r\n   * @param {*} value - 缓存值\r\n   * @param {number} [expiration] - 过期时间（毫秒）\r\n   */\n  set(key, value, expiration = null) {\n    const data = {\n      value,\n      timestamp: Date.now()\n    };\n    if (expiration) {\n      data.expiration = expiration;\n    }\n    this.storage.setItem(this.prefix + key, JSON.stringify(data));\n  }\n\n  /**\r\n   * 获取缓存\r\n   * @param {string} key - 缓存键\r\n   * @param {*} [defaultValue] - 默认值\r\n   * @returns {*} 缓存值\r\n   */\n  get(key, defaultValue = null) {\n    const data = this.storage.getItem(this.prefix + key);\n    if (!data) {\n      return defaultValue;\n    }\n    try {\n      const parsed = JSON.parse(data);\n\n      // 检查是否过期\n      if (parsed.expiration && Date.now() - parsed.timestamp > parsed.expiration) {\n        this.remove(key);\n        return defaultValue;\n      }\n      return parsed.value;\n    } catch (error) {\n      console.error('Cache parse error:', error);\n      return defaultValue;\n    }\n  }\n\n  /**\r\n   * 移除缓存\r\n   * @param {string} key - 缓存键\r\n   */\n  remove(key) {\n    this.storage.removeItem(this.prefix + key);\n  }\n\n  /**\r\n   * 清除所有缓存\r\n   */\n  clear() {\n    const keys = Object.keys(this.storage);\n    keys.forEach(key => {\n      if (key.startsWith(this.prefix)) {\n        this.storage.removeItem(key);\n      }\n    });\n  }\n\n  /**\r\n   * 获取所有缓存键\r\n   * @returns {string[]} 缓存键数组\r\n   */\n  keys() {\n    const keys = Object.keys(this.storage);\n    return keys.filter(key => key.startsWith(this.prefix)).map(key => key.slice(this.prefix.length));\n  }\n\n  /**\r\n   * 检查缓存是否存在\r\n   * @param {string} key - 缓存键\r\n   * @returns {boolean}\r\n   */\n  has(key) {\n    return this.storage.getItem(this.prefix + key) !== null;\n  }\n\n  /**\r\n   * 获取缓存大小（字节）\r\n   * @returns {number}\r\n   */\n  size() {\n    let size = 0;\n    const keys = this.keys();\n    keys.forEach(key => {\n      const item = this.storage.getItem(this.prefix + key);\n      size += item.length * 2; // UTF-16 编码每个字符占2字节\n    });\n    return size;\n  }\n\n  /**\r\n   * 批量设置缓存\r\n   * @param {Object} data - 键值对\r\n   * @param {number} [expiration] - 过期时间（毫秒）\r\n   */\n  setMultiple(data, expiration = null) {\n    Object.entries(data).forEach(([key, value]) => {\n      this.set(key, value, expiration);\n    });\n  }\n\n  /**\r\n   * 批量获取缓存\r\n   * @param {string[]} keys - 缓存键数组\r\n   * @param {*} [defaultValue] - 默认值\r\n   * @returns {Object} 键值对\r\n   */\n  getMultiple(keys, defaultValue = null) {\n    const result = {};\n    keys.forEach(key => {\n      result[key] = this.get(key, defaultValue);\n    });\n    return result;\n  }\n\n  /**\r\n   * 批量移除缓存\r\n   * @param {string[]} keys - 缓存键数组\r\n   */\n  removeMultiple(keys) {\n    keys.forEach(key => this.remove(key));\n  }\n\n  /**\r\n   * 获取缓存统计信息\r\n   * @returns {Object}\r\n   */\n  stats() {\n    const keys = this.keys();\n    return {\n      count: keys.length,\n      size: this.size(),\n      keys\n    };\n  }\n\n  /**\r\n   * 清理过期缓存\r\n   */\n  cleanup() {\n    const keys = this.keys();\n    keys.forEach(key => {\n      const data = this.storage.getItem(this.prefix + key);\n      try {\n        const parsed = JSON.parse(data);\n        if (parsed.expiration && Date.now() - parsed.timestamp > parsed.expiration) {\n          this.remove(key);\n        }\n      } catch (error) {\n        console.error('Cache cleanup error:', error);\n      }\n    });\n  }\n}\n\n// 创建默认实例\nconst cache = new Cache();\nexport default cache;","map":{"version":3,"names":["Cache","constructor","prefix","storage","window","localStorage","set","key","value","expiration","data","timestamp","Date","now","setItem","JSON","stringify","get","defaultValue","getItem","parsed","parse","remove","error","console","removeItem","clear","keys","Object","forEach","startsWith","filter","map","slice","length","has","size","item","setMultiple","entries","getMultiple","result","removeMultiple","stats","count","cleanup","cache"],"sources":["D:/restore/water-melt/frontend/src/utils/cache.js"],"sourcesContent":["class Cache {\r\n  constructor(prefix = 'app_cache_') {\r\n    this.prefix = prefix\r\n    this.storage = window.localStorage\r\n  }\r\n\r\n  /**\r\n   * 设置缓存\r\n   * @param {string} key - 缓存键\r\n   * @param {*} value - 缓存值\r\n   * @param {number} [expiration] - 过期时间（毫秒）\r\n   */\r\n  set(key, value, expiration = null) {\r\n    const data = {\r\n      value,\r\n      timestamp: Date.now()\r\n    }\r\n\r\n    if (expiration) {\r\n      data.expiration = expiration\r\n    }\r\n\r\n    this.storage.setItem(this.prefix + key, JSON.stringify(data))\r\n  }\r\n\r\n  /**\r\n   * 获取缓存\r\n   * @param {string} key - 缓存键\r\n   * @param {*} [defaultValue] - 默认值\r\n   * @returns {*} 缓存值\r\n   */\r\n  get(key, defaultValue = null) {\r\n    const data = this.storage.getItem(this.prefix + key)\r\n\r\n    if (!data) {\r\n      return defaultValue\r\n    }\r\n\r\n    try {\r\n      const parsed = JSON.parse(data)\r\n      \r\n      // 检查是否过期\r\n      if (parsed.expiration && Date.now() - parsed.timestamp > parsed.expiration) {\r\n        this.remove(key)\r\n        return defaultValue\r\n      }\r\n\r\n      return parsed.value\r\n    } catch (error) {\r\n      console.error('Cache parse error:', error)\r\n      return defaultValue\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 移除缓存\r\n   * @param {string} key - 缓存键\r\n   */\r\n  remove(key) {\r\n    this.storage.removeItem(this.prefix + key)\r\n  }\r\n\r\n  /**\r\n   * 清除所有缓存\r\n   */\r\n  clear() {\r\n    const keys = Object.keys(this.storage)\r\n    keys.forEach(key => {\r\n      if (key.startsWith(this.prefix)) {\r\n        this.storage.removeItem(key)\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 获取所有缓存键\r\n   * @returns {string[]} 缓存键数组\r\n   */\r\n  keys() {\r\n    const keys = Object.keys(this.storage)\r\n    return keys.filter(key => key.startsWith(this.prefix))\r\n      .map(key => key.slice(this.prefix.length))\r\n  }\r\n\r\n  /**\r\n   * 检查缓存是否存在\r\n   * @param {string} key - 缓存键\r\n   * @returns {boolean}\r\n   */\r\n  has(key) {\r\n    return this.storage.getItem(this.prefix + key) !== null\r\n  }\r\n\r\n  /**\r\n   * 获取缓存大小（字节）\r\n   * @returns {number}\r\n   */\r\n  size() {\r\n    let size = 0\r\n    const keys = this.keys()\r\n    keys.forEach(key => {\r\n      const item = this.storage.getItem(this.prefix + key)\r\n      size += item.length * 2 // UTF-16 编码每个字符占2字节\r\n    })\r\n    return size\r\n  }\r\n\r\n  /**\r\n   * 批量设置缓存\r\n   * @param {Object} data - 键值对\r\n   * @param {number} [expiration] - 过期时间（毫秒）\r\n   */\r\n  setMultiple(data, expiration = null) {\r\n    Object.entries(data).forEach(([key, value]) => {\r\n      this.set(key, value, expiration)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 批量获取缓存\r\n   * @param {string[]} keys - 缓存键数组\r\n   * @param {*} [defaultValue] - 默认值\r\n   * @returns {Object} 键值对\r\n   */\r\n  getMultiple(keys, defaultValue = null) {\r\n    const result = {}\r\n    keys.forEach(key => {\r\n      result[key] = this.get(key, defaultValue)\r\n    })\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * 批量移除缓存\r\n   * @param {string[]} keys - 缓存键数组\r\n   */\r\n  removeMultiple(keys) {\r\n    keys.forEach(key => this.remove(key))\r\n  }\r\n\r\n  /**\r\n   * 获取缓存统计信息\r\n   * @returns {Object}\r\n   */\r\n  stats() {\r\n    const keys = this.keys()\r\n    return {\r\n      count: keys.length,\r\n      size: this.size(),\r\n      keys\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 清理过期缓存\r\n   */\r\n  cleanup() {\r\n    const keys = this.keys()\r\n    keys.forEach(key => {\r\n      const data = this.storage.getItem(this.prefix + key)\r\n      try {\r\n        const parsed = JSON.parse(data)\r\n        if (parsed.expiration && Date.now() - parsed.timestamp > parsed.expiration) {\r\n          this.remove(key)\r\n        }\r\n      } catch (error) {\r\n        console.error('Cache cleanup error:', error)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\n// 创建默认实例\r\nconst cache = new Cache()\r\n\r\nexport default cache "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}