{"ast":null,"code":"import { ref, watch, onMounted } from 'vue';\nimport numeral from 'numeral';\nexport default {\n  name: 'AnimatedNumber',\n  props: {\n    value: {\n      type: [Number, String],\n      required: true\n    },\n    duration: {\n      type: Number,\n      default: 1000\n    },\n    format: {\n      type: String,\n      default: ''\n    }\n  },\n  setup(props) {\n    const displayValue = ref(props.value);\n    function animateNumber(start, end, duration) {\n      const startTime = performance.now();\n      function update(currentTime) {\n        const elapsed = currentTime - startTime;\n        const progress = Math.min(elapsed / duration, 1);\n        const currentValue = start + (end - start) * progress;\n        displayValue.value = props.format ? numeral(currentValue).format(props.format) : currentValue.toFixed(2);\n        if (progress < 1) {\n          requestAnimationFrame(update);\n        }\n      }\n      requestAnimationFrame(update);\n    }\n    watch(() => props.value, (newValue, oldValue) => {\n      animateNumber(Number(oldValue), Number(newValue), props.duration);\n    });\n    onMounted(() => {\n      displayValue.value = props.format ? numeral(props.value).format(props.format) : props.value;\n    });\n    return {\n      displayValue\n    };\n  }\n};","map":{"version":3,"names":["ref","watch","onMounted","numeral","name","props","value","type","Number","String","required","duration","default","format","setup","displayValue","animateNumber","start","end","startTime","performance","now","update","currentTime","elapsed","progress","Math","min","currentValue","toFixed","requestAnimationFrame","newValue","oldValue"],"sources":["D:\\restore\\water-melt\\frontend\\src\\components\\AnimatedNumber.vue"],"sourcesContent":["<template>\r\n  <span \r\n    class=\"animated-number\" \r\n    :class=\"{\r\n      'animated-number--positive': Number(displayValue) > 0,\r\n      'animated-number--negative': Number(displayValue) < 0\r\n    }\">\r\n    {{ displayValue }}\r\n  </span>\r\n</template>\r\n\r\n<script>\r\nimport { ref, watch, onMounted } from 'vue'\r\nimport numeral from 'numeral'\r\n\r\nexport default {\r\n  name: 'AnimatedNumber',\r\n  props: {\r\n    value: {\r\n      type: [Number, String],\r\n      required: true\r\n    },\r\n    duration: {\r\n      type: Number,\r\n      default: 1000\r\n    },\r\n    format: {\r\n      type: String,\r\n      default: ''\r\n    }\r\n  },\r\n  setup(props) {\r\n    const displayValue = ref(props.value)\r\n\r\n    function animateNumber(start, end, duration) {\r\n      const startTime = performance.now()\r\n      \r\n      function update(currentTime) {\r\n        const elapsed = currentTime - startTime\r\n        const progress = Math.min(elapsed / duration, 1)\r\n        const currentValue = start + (end - start) * progress\r\n\r\n        displayValue.value = props.format \r\n          ? numeral(currentValue).format(props.format)\r\n          : currentValue.toFixed(2)\r\n\r\n        if (progress < 1) {\r\n          requestAnimationFrame(update)\r\n        }\r\n      }\r\n\r\n      requestAnimationFrame(update)\r\n    }\r\n\r\n    watch(() => props.value, (newValue, oldValue) => {\r\n      animateNumber(Number(oldValue), Number(newValue), props.duration)\r\n    })\r\n\r\n    onMounted(() => {\r\n      displayValue.value = props.format \r\n        ? numeral(props.value).format(props.format)\r\n        : props.value\r\n    })\r\n\r\n    return {\r\n      displayValue\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.animated-number {\r\n  display: inline-block;\r\n  transition: color 0.3s ease;\r\n  font-weight: bold;\r\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\r\n  color: var(--background-dark);\r\n\r\n  &--positive {\r\n    color: var(--secondary-color);\r\n  }\r\n\r\n  &--negative {\r\n    color: var(--accent-color);\r\n  }\r\n}\r\n\r\n@media (prefers-color-scheme: dark) {\r\n  .animated-number {\r\n    color: #ffffff;\r\n\r\n    &--positive {\r\n      color: var(--secondary-color);\r\n    }\r\n\r\n    &--negative {\r\n      color: var(--accent-color);\r\n    }\r\n  }\r\n}\r\n</style> "],"mappings":"AAYA,SAASA,GAAG,EAAEC,KAAK,EAAEC,SAAQ,QAAS,KAAI;AAC1C,OAAOC,OAAM,MAAO,SAAQ;AAE5B,eAAe;EACbC,IAAI,EAAE,gBAAgB;EACtBC,KAAK,EAAE;IACLC,KAAK,EAAE;MACLC,IAAI,EAAE,CAACC,MAAM,EAAEC,MAAM,CAAC;MACtBC,QAAQ,EAAE;IACZ,CAAC;IACDC,QAAQ,EAAE;MACRJ,IAAI,EAAEC,MAAM;MACZI,OAAO,EAAE;IACX,CAAC;IACDC,MAAM,EAAE;MACNN,IAAI,EAAEE,MAAM;MACZG,OAAO,EAAE;IACX;EACF,CAAC;EACDE,KAAKA,CAACT,KAAK,EAAE;IACX,MAAMU,YAAW,GAAIf,GAAG,CAACK,KAAK,CAACC,KAAK;IAEpC,SAASU,aAAaA,CAACC,KAAK,EAAEC,GAAG,EAAEP,QAAQ,EAAE;MAC3C,MAAMQ,SAAQ,GAAIC,WAAW,CAACC,GAAG,CAAC;MAElC,SAASC,MAAMA,CAACC,WAAW,EAAE;QAC3B,MAAMC,OAAM,GAAID,WAAU,GAAIJ,SAAQ;QACtC,MAAMM,QAAO,GAAIC,IAAI,CAACC,GAAG,CAACH,OAAM,GAAIb,QAAQ,EAAE,CAAC;QAC/C,MAAMiB,YAAW,GAAIX,KAAI,GAAI,CAACC,GAAE,GAAID,KAAK,IAAIQ,QAAO;QAEpDV,YAAY,CAACT,KAAI,GAAID,KAAK,CAACQ,MAAK,GAC5BV,OAAO,CAACyB,YAAY,CAAC,CAACf,MAAM,CAACR,KAAK,CAACQ,MAAM,IACzCe,YAAY,CAACC,OAAO,CAAC,CAAC;QAE1B,IAAIJ,QAAO,GAAI,CAAC,EAAE;UAChBK,qBAAqB,CAACR,MAAM;QAC9B;MACF;MAEAQ,qBAAqB,CAACR,MAAM;IAC9B;IAEArB,KAAK,CAAC,MAAMI,KAAK,CAACC,KAAK,EAAE,CAACyB,QAAQ,EAAEC,QAAQ,KAAK;MAC/ChB,aAAa,CAACR,MAAM,CAACwB,QAAQ,CAAC,EAAExB,MAAM,CAACuB,QAAQ,CAAC,EAAE1B,KAAK,CAACM,QAAQ;IAClE,CAAC;IAEDT,SAAS,CAAC,MAAM;MACda,YAAY,CAACT,KAAI,GAAID,KAAK,CAACQ,MAAK,GAC5BV,OAAO,CAACE,KAAK,CAACC,KAAK,CAAC,CAACO,MAAM,CAACR,KAAK,CAACQ,MAAM,IACxCR,KAAK,CAACC,KAAI;IAChB,CAAC;IAED,OAAO;MACLS;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}