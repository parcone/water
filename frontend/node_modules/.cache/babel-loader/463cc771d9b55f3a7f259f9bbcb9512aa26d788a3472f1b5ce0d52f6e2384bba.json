{"ast":null,"code":"import axios from 'axios';\nimport { ElMessage } from 'element-plus';\nimport store from '@/store';\nimport cache from './cache';\n\n// 创建axios实例\nconst service = axios.create({\n  baseURL: process.env.VUE_APP_BASE_API || '/api',\n  timeout: 15000\n});\n\n// 请求拦截器\nservice.interceptors.request.use(config => {\n  // 从缓存中获取token\n  const token = store.getters['auth/token'];\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n\n  // 处理请求缓存\n  if (config.cache) {\n    const cacheKey = `request_${config.url}_${JSON.stringify(config.params || {})}_${JSON.stringify(config.data || {})}`;\n    const cachedData = cache.get(cacheKey);\n    if (cachedData) {\n      // 如果有缓存，取消请求并返回缓存数据\n      config.cancelToken = new axios.CancelToken(cancel => {\n        cancel('Request canceled due to cache hit');\n      });\n      return {\n        ...config,\n        __fromCache: true,\n        __cacheData: cachedData\n      };\n    }\n\n    // 记录缓存键以便响应时使用\n    config.__cacheKey = cacheKey;\n  }\n  return config;\n}, error => {\n  console.error('Request error:', error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nservice.interceptors.response.use(response => {\n  // 处理从缓存返回的数据\n  if (response.config.__fromCache) {\n    return response.config.__cacheData;\n  }\n  const {\n    data\n  } = response;\n\n  // 处理业务错误\n  if (data.code && data.code !== 200) {\n    ElMessage.error(data.message || '请求失败');\n    return Promise.reject(new Error(data.message || '请求失败'));\n  }\n\n  // 缓存响应数据\n  if (response.config.cache && response.config.__cacheKey) {\n    cache.set(response.config.__cacheKey, data, response.config.cacheExpiration || 5 * 60 * 1000 // 默认缓存5分钟\n    );\n  }\n  return data;\n}, error => {\n  // 处理缓存导致的请求取消\n  if (axios.isCancel(error)) {\n    return Promise.resolve(error.message);\n  }\n\n  // 处理网络错误\n  let message = '网络错误';\n  if (error.response) {\n    switch (error.response.status) {\n      case 401:\n        message = '未授权，请登录';\n        store.dispatch('auth/logout');\n        break;\n      case 403:\n        message = '拒绝访问';\n        break;\n      case 404:\n        message = '请求地址不存在';\n        break;\n      case 500:\n        message = '服务器内部错误';\n        break;\n      default:\n        message = error.response.data.message || `请求失败 ${error.response.status}`;\n    }\n  } else if (error.request) {\n    message = '服务器无响应';\n  } else {\n    message = error.message;\n  }\n  ElMessage.error(message);\n  return Promise.reject(error);\n});\n\n/**\r\n * 请求方法封装\r\n * @param {Object} config - axios配置\r\n * @param {boolean} [config.cache=false] - 是否启用缓存\r\n * @param {number} [config.cacheExpiration] - 缓存过期时间（毫秒）\r\n * @returns {Promise}\r\n */\nconst request = async config => {\n  try {\n    const response = await service(config);\n    return response;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\n// 请求方法别名\nrequest.get = (url, config = {}) => request({\n  ...config,\n  method: 'get',\n  url\n});\nrequest.post = (url, data, config = {}) => request({\n  ...config,\n  method: 'post',\n  url,\n  data\n});\nrequest.put = (url, data, config = {}) => request({\n  ...config,\n  method: 'put',\n  url,\n  data\n});\nrequest.delete = (url, config = {}) => request({\n  ...config,\n  method: 'delete',\n  url\n});\n\n// 批量请求\nrequest.all = axios.all;\nrequest.spread = axios.spread;\nexport default request;","map":{"version":3,"names":["axios","ElMessage","store","cache","service","create","baseURL","process","env","VUE_APP_BASE_API","timeout","interceptors","request","use","config","token","getters","headers","cacheKey","url","JSON","stringify","params","data","cachedData","get","cancelToken","CancelToken","cancel","__fromCache","__cacheData","__cacheKey","error","console","Promise","reject","response","code","message","Error","set","cacheExpiration","isCancel","resolve","status","dispatch","method","post","put","delete","all","spread"],"sources":["D:/restore/water-melt/frontend/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\r\nimport { ElMessage } from 'element-plus'\r\nimport store from '@/store'\r\nimport cache from './cache'\r\n\r\n// 创建axios实例\r\nconst service = axios.create({\r\n  baseURL: process.env.VUE_APP_BASE_API || '/api',\r\n  timeout: 15000\r\n})\r\n\r\n// 请求拦截器\r\nservice.interceptors.request.use(\r\n  config => {\r\n    // 从缓存中获取token\r\n    const token = store.getters['auth/token']\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`\r\n    }\r\n\r\n    // 处理请求缓存\r\n    if (config.cache) {\r\n      const cacheKey = `request_${config.url}_${JSON.stringify(config.params || {})}_${JSON.stringify(config.data || {})}`\r\n      const cachedData = cache.get(cacheKey)\r\n\r\n      if (cachedData) {\r\n        // 如果有缓存，取消请求并返回缓存数据\r\n        config.cancelToken = new axios.CancelToken(cancel => {\r\n          cancel('Request canceled due to cache hit')\r\n        })\r\n        return {\r\n          ...config,\r\n          __fromCache: true,\r\n          __cacheData: cachedData\r\n        }\r\n      }\r\n\r\n      // 记录缓存键以便响应时使用\r\n      config.__cacheKey = cacheKey\r\n    }\r\n\r\n    return config\r\n  },\r\n  error => {\r\n    console.error('Request error:', error)\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\n// 响应拦截器\r\nservice.interceptors.response.use(\r\n  response => {\r\n    // 处理从缓存返回的数据\r\n    if (response.config.__fromCache) {\r\n      return response.config.__cacheData\r\n    }\r\n\r\n    const { data } = response\r\n\r\n    // 处理业务错误\r\n    if (data.code && data.code !== 200) {\r\n      ElMessage.error(data.message || '请求失败')\r\n      return Promise.reject(new Error(data.message || '请求失败'))\r\n    }\r\n\r\n    // 缓存响应数据\r\n    if (response.config.cache && response.config.__cacheKey) {\r\n      cache.set(\r\n        response.config.__cacheKey,\r\n        data,\r\n        response.config.cacheExpiration || 5 * 60 * 1000 // 默认缓存5分钟\r\n      )\r\n    }\r\n\r\n    return data\r\n  },\r\n  error => {\r\n    // 处理缓存导致的请求取消\r\n    if (axios.isCancel(error)) {\r\n      return Promise.resolve(error.message)\r\n    }\r\n\r\n    // 处理网络错误\r\n    let message = '网络错误'\r\n    if (error.response) {\r\n      switch (error.response.status) {\r\n        case 401:\r\n          message = '未授权，请登录'\r\n          store.dispatch('auth/logout')\r\n          break\r\n        case 403:\r\n          message = '拒绝访问'\r\n          break\r\n        case 404:\r\n          message = '请求地址不存在'\r\n          break\r\n        case 500:\r\n          message = '服务器内部错误'\r\n          break\r\n        default:\r\n          message = error.response.data.message || `请求失败 ${error.response.status}`\r\n      }\r\n    } else if (error.request) {\r\n      message = '服务器无响应'\r\n    } else {\r\n      message = error.message\r\n    }\r\n\r\n    ElMessage.error(message)\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\n/**\r\n * 请求方法封装\r\n * @param {Object} config - axios配置\r\n * @param {boolean} [config.cache=false] - 是否启用缓存\r\n * @param {number} [config.cacheExpiration] - 缓存过期时间（毫秒）\r\n * @returns {Promise}\r\n */\r\nconst request = async (config) => {\r\n  try {\r\n    const response = await service(config)\r\n    return response\r\n  } catch (error) {\r\n    return Promise.reject(error)\r\n  }\r\n}\r\n\r\n// 请求方法别名\r\nrequest.get = (url, config = {}) => request({ ...config, method: 'get', url })\r\nrequest.post = (url, data, config = {}) => request({ ...config, method: 'post', url, data })\r\nrequest.put = (url, data, config = {}) => request({ ...config, method: 'put', url, data })\r\nrequest.delete = (url, config = {}) => request({ ...config, method: 'delete', url })\r\n\r\n// 批量请求\r\nrequest.all = axios.all\r\nrequest.spread = axios.spread\r\n\r\nexport default request "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}