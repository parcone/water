{"ast":null,"code":"import { ref, reactive } from 'vue';\nimport { useStore } from 'vuex';\nimport { useRouter } from 'vue-router';\nimport { ElMessage } from 'element-plus';\nexport default {\n  name: 'Login',\n  setup() {\n    const store = useStore();\n    const router = useRouter();\n    const loginForm = ref(null);\n    const loading = ref(false);\n    const form = reactive({\n      username: '',\n      password: ''\n    });\n    const rules = {\n      username: [{\n        required: true,\n        message: 'Please enter your username',\n        trigger: 'blur'\n      }],\n      password: [{\n        required: true,\n        message: 'Please enter your password',\n        trigger: 'blur'\n      }]\n    };\n    const handleSubmit = async () => {\n      if (!loginForm.value) return;\n      try {\n        await loginForm.value.validate();\n        loading.value = true;\n        await store.dispatch('auth/login', form);\n        ElMessage.success('Login successful');\n        router.push('/');\n      } catch (error) {\n        ElMessage.error(error.response?.data?.message || 'Login failed');\n      } finally {\n        loading.value = false;\n      }\n    };\n    return {\n      form,\n      rules,\n      loading,\n      loginForm,\n      handleSubmit\n    };\n  }\n};","map":{"version":3,"names":["ref","reactive","useStore","useRouter","ElMessage","name","setup","store","router","loginForm","loading","form","username","password","rules","required","message","trigger","handleSubmit","value","validate","dispatch","success","push","error","response","data"],"sources":["D:\\restore\\water-melt\\frontend\\src\\views\\Login.vue"],"sourcesContent":["<template>\r\n  <div class=\"login-container\">\r\n    <el-card class=\"login-card\">\r\n      <template #header>\r\n        <h2 class=\"card-title\">Login</h2>\r\n      </template>\r\n\r\n      <el-form\r\n        ref=\"loginForm\"\r\n        :model=\"form\"\r\n        :rules=\"rules\"\r\n        label-position=\"top\"\r\n        @submit.prevent=\"handleSubmit\"\r\n      >\r\n        <el-form-item label=\"Username\" prop=\"username\">\r\n          <el-input\r\n            v-model=\"form.username\"\r\n            prefix-icon=\"User\"\r\n            placeholder=\"Enter your username\"\r\n          />\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"Password\" prop=\"password\">\r\n          <el-input\r\n            v-model=\"form.password\"\r\n            type=\"password\"\r\n            prefix-icon=\"Lock\"\r\n            placeholder=\"Enter your password\"\r\n            show-password\r\n          />\r\n        </el-form-item>\r\n\r\n        <div class=\"form-actions\">\r\n          <el-button type=\"primary\" native-type=\"submit\" :loading=\"loading\">\r\n            Login\r\n          </el-button>\r\n          <el-link type=\"primary\" @click=\"$router.push('/register')\">\r\n            Don't have an account? Register\r\n          </el-link>\r\n        </div>\r\n      </el-form>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, reactive } from 'vue'\r\nimport { useStore } from 'vuex'\r\nimport { useRouter } from 'vue-router'\r\nimport { ElMessage } from 'element-plus'\r\n\r\nexport default {\r\n  name: 'Login',\r\n  setup() {\r\n    const store = useStore()\r\n    const router = useRouter()\r\n    const loginForm = ref(null)\r\n    const loading = ref(false)\r\n\r\n    const form = reactive({\r\n      username: '',\r\n      password: ''\r\n    })\r\n\r\n    const rules = {\r\n      username: [\r\n        { required: true, message: 'Please enter your username', trigger: 'blur' }\r\n      ],\r\n      password: [\r\n        { required: true, message: 'Please enter your password', trigger: 'blur' }\r\n      ]\r\n    }\r\n\r\n    const handleSubmit = async () => {\r\n      if (!loginForm.value) return\r\n\r\n      try {\r\n        await loginForm.value.validate()\r\n        loading.value = true\r\n\r\n        await store.dispatch('auth/login', form)\r\n        ElMessage.success('Login successful')\r\n        router.push('/')\r\n      } catch (error) {\r\n        ElMessage.error(error.response?.data?.message || 'Login failed')\r\n      } finally {\r\n        loading.value = false\r\n      }\r\n    }\r\n\r\n    return {\r\n      form,\r\n      rules,\r\n      loading,\r\n      loginForm,\r\n      handleSubmit\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.login-container {\r\n  min-height: 100vh;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color: #f5f7fa;\r\n}\r\n\r\n.login-card {\r\n  width: 100%;\r\n  max-width: 400px;\r\n  margin: 20px;\r\n}\r\n\r\n.card-title {\r\n  margin: 0;\r\n  text-align: center;\r\n  color: #303133;\r\n}\r\n\r\n.form-actions {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 16px;\r\n  margin-top: 24px;\r\n\r\n  .el-button {\r\n    width: 100%;\r\n  }\r\n}\r\n</style> "],"mappings":"AA8CA,SAASA,GAAG,EAAEC,QAAO,QAAS,KAAI;AAClC,SAASC,QAAO,QAAS,MAAK;AAC9B,SAASC,SAAQ,QAAS,YAAW;AACrC,SAASC,SAAQ,QAAS,cAAa;AAEvC,eAAe;EACbC,IAAI,EAAE,OAAO;EACbC,KAAKA,CAAA,EAAG;IACN,MAAMC,KAAI,GAAIL,QAAQ,CAAC;IACvB,MAAMM,MAAK,GAAIL,SAAS,CAAC;IACzB,MAAMM,SAAQ,GAAIT,GAAG,CAAC,IAAI;IAC1B,MAAMU,OAAM,GAAIV,GAAG,CAAC,KAAK;IAEzB,MAAMW,IAAG,GAAIV,QAAQ,CAAC;MACpBW,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE;IACZ,CAAC;IAED,MAAMC,KAAI,GAAI;MACZF,QAAQ,EAAE,CACR;QAAEG,QAAQ,EAAE,IAAI;QAAEC,OAAO,EAAE,4BAA4B;QAAEC,OAAO,EAAE;MAAO,EAC1E;MACDJ,QAAQ,EAAE,CACR;QAAEE,QAAQ,EAAE,IAAI;QAAEC,OAAO,EAAE,4BAA4B;QAAEC,OAAO,EAAE;MAAO;IAE7E;IAEA,MAAMC,YAAW,GAAI,MAAAA,CAAA,KAAY;MAC/B,IAAI,CAACT,SAAS,CAACU,KAAK,EAAE;MAEtB,IAAI;QACF,MAAMV,SAAS,CAACU,KAAK,CAACC,QAAQ,CAAC;QAC/BV,OAAO,CAACS,KAAI,GAAI,IAAG;QAEnB,MAAMZ,KAAK,CAACc,QAAQ,CAAC,YAAY,EAAEV,IAAI;QACvCP,SAAS,CAACkB,OAAO,CAAC,kBAAkB;QACpCd,MAAM,CAACe,IAAI,CAAC,GAAG;MACjB,EAAE,OAAOC,KAAK,EAAE;QACdpB,SAAS,CAACoB,KAAK,CAACA,KAAK,CAACC,QAAQ,EAAEC,IAAI,EAAEV,OAAM,IAAK,cAAc;MACjE,UAAU;QACRN,OAAO,CAACS,KAAI,GAAI,KAAI;MACtB;IACF;IAEA,OAAO;MACLR,IAAI;MACJG,KAAK;MACLJ,OAAO;MACPD,SAAS;MACTS;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}