{"ast":null,"code":"import * as XLSX from 'xlsx';\n\n/**\r\n * 导出数据到Excel文件\r\n * @param {Array} header 表头\r\n * @param {Array} data 数据\r\n * @param {string} filename 文件名\r\n */\nexport const exportToExcel = (header, data, filename) => {\n  const ws = XLSX.utils.aoa_to_sheet([header, ...data]);\n  const wb = XLSX.utils.book_new();\n  XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');\n\n  // 设置列宽\n  const colWidth = header.map(() => ({\n    wch: 15\n  }));\n  ws['!cols'] = colWidth;\n\n  // 导出文件\n  XLSX.writeFile(wb, `${filename}.xlsx`);\n};\n\n/**\r\n * 从Excel文件导入数据\r\n * @param {File} file Excel文件\r\n * @returns {Promise<Array>} 解析后的数据\r\n */\nexport const importFromExcel = file => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = e => {\n      try {\n        const wb = XLSX.read(e.target.result, {\n          type: 'binary'\n        });\n        const ws = wb.Sheets[wb.SheetNames[0]];\n        const data = XLSX.utils.sheet_to_json(ws, {\n          header: 1\n        });\n        resolve(data);\n      } catch (error) {\n        reject(new Error('Excel文件解析失败'));\n      }\n    };\n    reader.onerror = () => {\n      reject(new Error('文件读取失败'));\n    };\n    reader.readAsBinaryString(file);\n  });\n};\n\n/**\r\n * 验证Excel文件格式\r\n * @param {File} file 文件对象\r\n * @returns {boolean} 是否为有效的Excel文件\r\n */\nexport const validateExcelFile = file => {\n  const types = ['application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];\n  return types.includes(file.type);\n};\n\n/**\r\n * 格式化Excel单元格数据\r\n * @param {*} value 单元格值\r\n * @param {string} type 期望的数据类型\r\n * @returns {*} 格式化后的值\r\n */\nexport const formatExcelCell = (value, type) => {\n  if (value === null || value === undefined) return '';\n  switch (type) {\n    case 'number':\n      return isNaN(Number(value)) ? 0 : Number(value);\n    case 'date':\n      return value instanceof Date ? value : new Date(value);\n    case 'boolean':\n      return Boolean(value);\n    default:\n      return String(value);\n  }\n};","map":{"version":3,"names":["XLSX","exportToExcel","header","data","filename","ws","utils","aoa_to_sheet","wb","book_new","book_append_sheet","colWidth","map","wch","writeFile","importFromExcel","file","Promise","resolve","reject","reader","FileReader","onload","e","read","target","result","type","Sheets","SheetNames","sheet_to_json","error","Error","onerror","readAsBinaryString","validateExcelFile","types","includes","formatExcelCell","value","undefined","isNaN","Number","Date","Boolean","String"],"sources":["D:/restore/water-melt/frontend/src/utils/excel.js"],"sourcesContent":["import * as XLSX from 'xlsx'\r\n\r\n/**\r\n * 导出数据到Excel文件\r\n * @param {Array} header 表头\r\n * @param {Array} data 数据\r\n * @param {string} filename 文件名\r\n */\r\nexport const exportToExcel = (header, data, filename) => {\r\n  const ws = XLSX.utils.aoa_to_sheet([header, ...data])\r\n  const wb = XLSX.utils.book_new()\r\n  XLSX.utils.book_append_sheet(wb, ws, 'Sheet1')\r\n  \r\n  // 设置列宽\r\n  const colWidth = header.map(() => ({ wch: 15 }))\r\n  ws['!cols'] = colWidth\r\n\r\n  // 导出文件\r\n  XLSX.writeFile(wb, `${filename}.xlsx`)\r\n}\r\n\r\n/**\r\n * 从Excel文件导入数据\r\n * @param {File} file Excel文件\r\n * @returns {Promise<Array>} 解析后的数据\r\n */\r\nexport const importFromExcel = (file) => {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader()\r\n    reader.onload = (e) => {\r\n      try {\r\n        const wb = XLSX.read(e.target.result, { type: 'binary' })\r\n        const ws = wb.Sheets[wb.SheetNames[0]]\r\n        const data = XLSX.utils.sheet_to_json(ws, { header: 1 })\r\n        resolve(data)\r\n      } catch (error) {\r\n        reject(new Error('Excel文件解析失败'))\r\n      }\r\n    }\r\n    reader.onerror = () => {\r\n      reject(new Error('文件读取失败'))\r\n    }\r\n    reader.readAsBinaryString(file)\r\n  })\r\n}\r\n\r\n/**\r\n * 验证Excel文件格式\r\n * @param {File} file 文件对象\r\n * @returns {boolean} 是否为有效的Excel文件\r\n */\r\nexport const validateExcelFile = (file) => {\r\n  const types = [\r\n    'application/vnd.ms-excel',\r\n    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\r\n  ]\r\n  return types.includes(file.type)\r\n}\r\n\r\n/**\r\n * 格式化Excel单元格数据\r\n * @param {*} value 单元格值\r\n * @param {string} type 期望的数据类型\r\n * @returns {*} 格式化后的值\r\n */\r\nexport const formatExcelCell = (value, type) => {\r\n  if (value === null || value === undefined) return ''\r\n  \r\n  switch (type) {\r\n    case 'number':\r\n      return isNaN(Number(value)) ? 0 : Number(value)\r\n    case 'date':\r\n      return value instanceof Date ? value : new Date(value)\r\n    case 'boolean':\r\n      return Boolean(value)\r\n    default:\r\n      return String(value)\r\n  }\r\n} "],"mappings":"AAAA,OAAO,KAAKA,IAAI,MAAM,MAAM;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAGA,CAACC,MAAM,EAAEC,IAAI,EAAEC,QAAQ,KAAK;EACvD,MAAMC,EAAE,GAAGL,IAAI,CAACM,KAAK,CAACC,YAAY,CAAC,CAACL,MAAM,EAAE,GAAGC,IAAI,CAAC,CAAC;EACrD,MAAMK,EAAE,GAAGR,IAAI,CAACM,KAAK,CAACG,QAAQ,CAAC,CAAC;EAChCT,IAAI,CAACM,KAAK,CAACI,iBAAiB,CAACF,EAAE,EAAEH,EAAE,EAAE,QAAQ,CAAC;;EAE9C;EACA,MAAMM,QAAQ,GAAGT,MAAM,CAACU,GAAG,CAAC,OAAO;IAAEC,GAAG,EAAE;EAAG,CAAC,CAAC,CAAC;EAChDR,EAAE,CAAC,OAAO,CAAC,GAAGM,QAAQ;;EAEtB;EACAX,IAAI,CAACc,SAAS,CAACN,EAAE,EAAE,GAAGJ,QAAQ,OAAO,CAAC;AACxC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMW,eAAe,GAAIC,IAAI,IAAK;EACvC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAC/BD,MAAM,CAACE,MAAM,GAAIC,CAAC,IAAK;MACrB,IAAI;QACF,MAAMf,EAAE,GAAGR,IAAI,CAACwB,IAAI,CAACD,CAAC,CAACE,MAAM,CAACC,MAAM,EAAE;UAAEC,IAAI,EAAE;QAAS,CAAC,CAAC;QACzD,MAAMtB,EAAE,GAAGG,EAAE,CAACoB,MAAM,CAACpB,EAAE,CAACqB,UAAU,CAAC,CAAC,CAAC,CAAC;QACtC,MAAM1B,IAAI,GAAGH,IAAI,CAACM,KAAK,CAACwB,aAAa,CAACzB,EAAE,EAAE;UAAEH,MAAM,EAAE;QAAE,CAAC,CAAC;QACxDgB,OAAO,CAACf,IAAI,CAAC;MACf,CAAC,CAAC,OAAO4B,KAAK,EAAE;QACdZ,MAAM,CAAC,IAAIa,KAAK,CAAC,aAAa,CAAC,CAAC;MAClC;IACF,CAAC;IACDZ,MAAM,CAACa,OAAO,GAAG,MAAM;MACrBd,MAAM,CAAC,IAAIa,KAAK,CAAC,QAAQ,CAAC,CAAC;IAC7B,CAAC;IACDZ,MAAM,CAACc,kBAAkB,CAAClB,IAAI,CAAC;EACjC,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMmB,iBAAiB,GAAInB,IAAI,IAAK;EACzC,MAAMoB,KAAK,GAAG,CACZ,0BAA0B,EAC1B,mEAAmE,CACpE;EACD,OAAOA,KAAK,CAACC,QAAQ,CAACrB,IAAI,CAACW,IAAI,CAAC;AAClC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMW,eAAe,GAAGA,CAACC,KAAK,EAAEZ,IAAI,KAAK;EAC9C,IAAIY,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKC,SAAS,EAAE,OAAO,EAAE;EAEpD,QAAQb,IAAI;IACV,KAAK,QAAQ;MACX,OAAOc,KAAK,CAACC,MAAM,CAACH,KAAK,CAAC,CAAC,GAAG,CAAC,GAAGG,MAAM,CAACH,KAAK,CAAC;IACjD,KAAK,MAAM;MACT,OAAOA,KAAK,YAAYI,IAAI,GAAGJ,KAAK,GAAG,IAAII,IAAI,CAACJ,KAAK,CAAC;IACxD,KAAK,SAAS;MACZ,OAAOK,OAAO,CAACL,KAAK,CAAC;IACvB;MACE,OAAOM,MAAM,CAACN,KAAK,CAAC;EACxB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}