{"ast":null,"code":"// 设备模块：提供示例数据和伪后端接口\n\nconst sampleDevices = [{\n  name: '传感器A',\n  type: '温湿度',\n  status: 'online',\n  location: '田块1',\n  lastUpdate: '2025-07-16 14:30:00',\n  latestData: '温度 25°C / 湿度 60%'\n}, {\n  name: '摄像头B',\n  type: '视频监控',\n  status: 'offline',\n  location: '田块2',\n  lastUpdate: '2025-07-16 10:15:00',\n  latestData: '离线'\n}, {\n  name: '网关C',\n  type: '数据网关',\n  status: 'online',\n  location: '田块3',\n  lastUpdate: '2025-07-16 14:35:00',\n  latestData: '吞吐 2.5MB/s'\n}, {\n  name: '传感器D',\n  type: 'PH值',\n  status: 'error',\n  location: '田块4',\n  lastUpdate: '2025-07-16 14:20:00',\n  latestData: 'PH 8.5'\n}];\nconst state = () => ({\n  devices: [...sampleDevices]\n});\nconst mutations = {\n  SET_DEVICES(state, devices) {\n    state.devices = devices;\n  },\n  DELETE_DEVICE(state, name) {\n    state.devices = state.devices.filter(d => d.name !== name);\n  }\n};\nconst actions = {\n  // 模拟获取设备列表\n  fetchDevices({\n    state\n  }) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve([...state.devices]);\n      }, 500);\n    });\n  },\n  // 模拟删除设备\n  deleteDevice({\n    commit\n  }, name) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        commit('DELETE_DEVICE', name);\n        resolve();\n      }, 300);\n    });\n  },\n  // 预测数据\n  fetchPredictions() {\n    // 生成随机预测数据\n    return new Promise(resolve => {\n      const data = {\n        temperature: Array.from({\n          length: 24\n        }, (_, i) => 24 + Math.sin(i / 12 * Math.PI) * 2 + Math.random()),\n        humidity: Array.from({\n          length: 24\n        }, () => 60 + Math.random() * 10),\n        ph: Array.from({\n          length: 24\n        }, () => 6.5 + Math.random())\n      };\n      setTimeout(() => resolve(data), 300);\n    });\n  },\n  // 历史数据\n  fetchHistory() {\n    return new Promise(resolve => setTimeout(() => resolve([]), 300));\n  },\n  fetchDeviceHistory() {\n    return new Promise(resolve => setTimeout(() => resolve([]), 300));\n  }\n};\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions\n};","map":{"version":3,"names":["sampleDevices","name","type","status","location","lastUpdate","latestData","state","devices","mutations","SET_DEVICES","DELETE_DEVICE","filter","d","actions","fetchDevices","Promise","resolve","setTimeout","deleteDevice","commit","fetchPredictions","data","temperature","Array","from","length","_","i","Math","sin","PI","random","humidity","ph","fetchHistory","fetchDeviceHistory","namespaced"],"sources":["D:/restore/water-melt/frontend/src/store/modules/device.js"],"sourcesContent":["// 设备模块：提供示例数据和伪后端接口\r\n\r\nconst sampleDevices = [\r\n  {\r\n    name: '传感器A',\r\n    type: '温湿度',\r\n    status: 'online',\r\n    location: '田块1',\r\n    lastUpdate: '2025-07-16 14:30:00',\r\n    latestData: '温度 25°C / 湿度 60%'\r\n  },\r\n  {\r\n    name: '摄像头B',\r\n    type: '视频监控',\r\n    status: 'offline',\r\n    location: '田块2',\r\n    lastUpdate: '2025-07-16 10:15:00',\r\n    latestData: '离线'\r\n  },\r\n  {\r\n    name: '网关C',\r\n    type: '数据网关',\r\n    status: 'online',\r\n    location: '田块3',\r\n    lastUpdate: '2025-07-16 14:35:00',\r\n    latestData: '吞吐 2.5MB/s'\r\n  },\r\n  {\r\n    name: '传感器D',\r\n    type: 'PH值',\r\n    status: 'error',\r\n    location: '田块4',\r\n    lastUpdate: '2025-07-16 14:20:00',\r\n    latestData: 'PH 8.5'\r\n  }\r\n]\r\n\r\nconst state = () => ({\r\n  devices: [...sampleDevices]\r\n})\r\n\r\nconst mutations = {\r\n  SET_DEVICES(state, devices) {\r\n    state.devices = devices\r\n  },\r\n  DELETE_DEVICE(state, name) {\r\n    state.devices = state.devices.filter(d => d.name !== name)\r\n  }\r\n}\r\n\r\nconst actions = {\r\n  // 模拟获取设备列表\r\n  fetchDevices({ state }) {\r\n    return new Promise(resolve => {\r\n      setTimeout(() => {\r\n        resolve([...state.devices])\r\n      }, 500)\r\n    })\r\n  },\r\n\r\n  // 模拟删除设备\r\n  deleteDevice({ commit }, name) {\r\n    return new Promise(resolve => {\r\n      setTimeout(() => {\r\n        commit('DELETE_DEVICE', name)\r\n        resolve()\r\n      }, 300)\r\n    })\r\n  },\r\n\r\n  // 预测数据\r\n  fetchPredictions() {\r\n    // 生成随机预测数据\r\n    return new Promise(resolve => {\r\n      const data = {\r\n        temperature: Array.from({ length: 24 }, (_, i) => 24 + Math.sin(i / 12 * Math.PI) * 2 + Math.random()),\r\n        humidity: Array.from({ length: 24 }, () => 60 + Math.random() * 10),\r\n        ph: Array.from({ length: 24 }, () => 6.5 + Math.random())\r\n      }\r\n      setTimeout(() => resolve(data), 300)\r\n    })\r\n  },\r\n\r\n  // 历史数据\r\n  fetchHistory() {\r\n    return new Promise(resolve => setTimeout(() => resolve([]), 300))\r\n  },\r\n\r\n  fetchDeviceHistory() {\r\n    return new Promise(resolve => setTimeout(() => resolve([]), 300))\r\n  }\r\n}\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state,\r\n  mutations,\r\n  actions\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}