{"ast":null,"code":"// 设备模块：提供示例数据和伪后端接口\n\nconst sampleDevices = Array.from({\n  length: 16\n}, (_, i) => {\n  const idx = i + 1;\n  const types = ['温湿度', 'PH值', '视频监控', '数据网关'];\n  const statuses = ['online', 'offline', 'error'];\n  return {\n    name: `设备-${idx}`,\n    type: types[i % 4],\n    status: statuses[i % 3],\n    location: `田块${idx}`,\n    lastUpdate: new Date().toLocaleString(),\n    latestData: `${types[i % 4]} 数据`\n  };\n});\nconst state = () => ({\n  devices: [...sampleDevices]\n});\nconst mutations = {\n  SET_DEVICES(state, devices) {\n    state.devices = devices;\n  },\n  DELETE_DEVICE(state, name) {\n    state.devices = state.devices.filter(d => d.name !== name);\n  }\n};\nconst actions = {\n  // 模拟获取设备列表\n  fetchDevices({\n    state\n  }) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve([...state.devices]);\n      }, 500);\n    });\n  },\n  // 模拟删除设备\n  deleteDevice({\n    commit\n  }, name) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        commit('DELETE_DEVICE', name);\n        resolve();\n      }, 300);\n    });\n  },\n  // 预测数据\n  fetchPredictions() {\n    // 生成随机预测数据\n    return new Promise(resolve => {\n      const data = {\n        temperature: Array.from({\n          length: 24\n        }, (_, i) => 24 + Math.sin(i / 12 * Math.PI) * 2 + Math.random()),\n        humidity: Array.from({\n          length: 24\n        }, () => 60 + Math.random() * 10),\n        ph: Array.from({\n          length: 24\n        }, () => 6.5 + Math.random())\n      };\n      setTimeout(() => resolve(data), 300);\n    });\n  },\n  // 历史数据\n  fetchHistory() {\n    return new Promise(resolve => setTimeout(() => resolve([]), 300));\n  },\n  fetchDeviceHistory() {\n    return new Promise(resolve => setTimeout(() => resolve([]), 300));\n  }\n};\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions\n};","map":{"version":3,"names":["sampleDevices","Array","from","length","_","i","idx","types","statuses","name","type","status","location","lastUpdate","Date","toLocaleString","latestData","state","devices","mutations","SET_DEVICES","DELETE_DEVICE","filter","d","actions","fetchDevices","Promise","resolve","setTimeout","deleteDevice","commit","fetchPredictions","data","temperature","Math","sin","PI","random","humidity","ph","fetchHistory","fetchDeviceHistory","namespaced"],"sources":["D:/restore/water-melt/frontend/src/store/modules/device.js"],"sourcesContent":["// 设备模块：提供示例数据和伪后端接口\r\n\r\nconst sampleDevices = Array.from({ length: 16 }, (_, i) => {\r\n  const idx = i + 1;\r\n  const types = ['温湿度', 'PH值', '视频监控', '数据网关'];\r\n  const statuses = ['online', 'offline', 'error'];\r\n  return {\r\n    name: `设备-${idx}`,\r\n    type: types[i % 4],\r\n    status: statuses[i % 3],\r\n    location: `田块${idx}`,\r\n    lastUpdate: new Date().toLocaleString(),\r\n    latestData: `${types[i % 4]} 数据`\r\n  };\r\n});\r\n\r\nconst state = () => ({\r\n  devices: [...sampleDevices]\r\n})\r\n\r\nconst mutations = {\r\n  SET_DEVICES(state, devices) {\r\n    state.devices = devices\r\n  },\r\n  DELETE_DEVICE(state, name) {\r\n    state.devices = state.devices.filter(d => d.name !== name)\r\n  }\r\n}\r\n\r\nconst actions = {\r\n  // 模拟获取设备列表\r\n  fetchDevices({ state }) {\r\n    return new Promise(resolve => {\r\n      setTimeout(() => {\r\n        resolve([...state.devices])\r\n      }, 500)\r\n    })\r\n  },\r\n\r\n  // 模拟删除设备\r\n  deleteDevice({ commit }, name) {\r\n    return new Promise(resolve => {\r\n      setTimeout(() => {\r\n        commit('DELETE_DEVICE', name)\r\n        resolve()\r\n      }, 300)\r\n    })\r\n  },\r\n\r\n  // 预测数据\r\n  fetchPredictions() {\r\n    // 生成随机预测数据\r\n    return new Promise(resolve => {\r\n      const data = {\r\n        temperature: Array.from({ length: 24 }, (_, i) => 24 + Math.sin(i / 12 * Math.PI) * 2 + Math.random()),\r\n        humidity: Array.from({ length: 24 }, () => 60 + Math.random() * 10),\r\n        ph: Array.from({ length: 24 }, () => 6.5 + Math.random())\r\n      }\r\n      setTimeout(() => resolve(data), 300)\r\n    })\r\n  },\r\n\r\n  // 历史数据\r\n  fetchHistory() {\r\n    return new Promise(resolve => setTimeout(() => resolve([]), 300))\r\n  },\r\n\r\n  fetchDeviceHistory() {\r\n    return new Promise(resolve => setTimeout(() => resolve([]), 300))\r\n  }\r\n}\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state,\r\n  mutations,\r\n  actions\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}