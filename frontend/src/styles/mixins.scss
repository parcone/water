// 响应式断点混入
@mixin respond-to($breakpoint) {
  @if $breakpoint == xs {
    @media screen and (max-width: $screen-xs) {
      @content;
    }
  }
  @else if $breakpoint == sm {
    @media screen and (max-width: $screen-sm) {
      @content;
    }
  }
  @else if $breakpoint == md {
    @media screen and (max-width: $screen-md) {
      @content;
    }
  }
  @else if $breakpoint == lg {
    @media screen and (max-width: $screen-lg) {
      @content;
    }
  }
  @else if $breakpoint == xl {
    @media screen and (max-width: $screen-xl) {
      @content;
    }
  }
  @else if $breakpoint == xxl {
    @media screen and (max-width: $screen-xxl) {
      @content;
    }
  }
}

// 弹性布局混入
@mixin flex($direction: row, $justify: flex-start, $align: stretch, $wrap: nowrap) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
  flex-wrap: $wrap;
}

// 网格布局混入
@mixin grid($columns: 1, $gap: $spacing-md) {
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  gap: $gap;
}

// 响应式网格混入
@mixin responsive-grid($min-width: 250px, $gap: $spacing-md) {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax($min-width, 1fr));
  gap: $gap;
}

// 文本截断混入
@mixin text-truncate($lines: 1) {
  @if $lines == 1 {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  } @else {
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
}

// 滚动条样式混入
@mixin scrollbar($width: 6px, $thumb-color: rgba(0, 0, 0, 0.3), $track-color: transparent) {
  &::-webkit-scrollbar {
    width: $width;
  }

  &::-webkit-scrollbar-thumb {
    background: $thumb-color;
    border-radius: $width / 2;
  }

  &::-webkit-scrollbar-track {
    background: $track-color;
  }
}

// 阴影混入
@mixin elevation($level: 1) {
  @if $level == 1 {
    box-shadow: $shadow-1;
  } @else if $level == 2 {
    box-shadow: $shadow-2;
  } @else if $level == 3 {
    box-shadow: $shadow-3;
  }
}

// 渐变背景混入
@mixin gradient($direction: 135deg, $start-color: $primary-color, $end-color: darken($primary-color, 15%)) {
  background: linear-gradient($direction, $start-color, $end-color);
}

// 毛玻璃效果混入
@mixin glassmorphism($bg-color: rgba(255, 255, 255, 0.1), $blur: 10px) {
  background: $bg-color;
  backdrop-filter: blur($blur);
  -webkit-backdrop-filter: blur($blur);
}

// 动画过渡混入
@mixin transition($properties...) {
  $transitions: ();
  @each $property in $properties {
    $transitions: append($transitions, $property $animation-duration-base ease, comma);
  }
  transition: $transitions;
}

// 响应式字体大小混入
@mixin responsive-font($min-size: $font-size-base, $max-size: $font-size-lg, $min-width: $screen-xs, $max-width: $screen-xl) {
  font-size: clamp($min-size, calc(#{$min-size} + (#{strip-unit($max-size)} - #{strip-unit($min-size)}) * ((100vw - #{$min-width}) / (#{strip-unit($max-width)} - #{strip-unit($min-width)}))), $max-size);
}

// 辅助函数：移除单位
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }
  @return $number;
}

// 响应式容器混入
@mixin container($padding: $spacing-md) {
  width: 100%;
  max-width: $screen-xl;
  margin: 0 auto;
  padding: 0 $padding;

  @include respond-to(lg) {
    max-width: $screen-lg;
  }

  @include respond-to(md) {
    max-width: $screen-md;
  }

  @include respond-to(sm) {
    max-width: 100%;
    padding: 0 $spacing-sm;
  }
}

// 响应式栅格混入
@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter) {
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  gap: $gutter;

  @include respond-to(lg) {
    grid-template-columns: repeat(floor($columns * 0.75), 1fr);
  }

  @include respond-to(md) {
    grid-template-columns: repeat(floor($columns * 0.5), 1fr);
  }

  @include respond-to(sm) {
    grid-template-columns: repeat(floor($columns * 0.25), 1fr);
  }

  @include respond-to(xs) {
    grid-template-columns: 1fr;
  }
}

// 响应式间距混入
@mixin responsive-spacing($property, $space) {
  #{$property}: $space;

  @if type-of($space) == "list" {
    @include respond-to(lg) {
      $new-space: ();
      @each $value in $space {
        $new-space: append($new-space, if(type-of($value) == "number", $value * 0.9, $value));
      }
      #{$property}: $new-space;
    }

    @include respond-to(md) {
      $new-space: ();
      @each $value in $space {
        $new-space: append($new-space, if(type-of($value) == "number", $value * 0.8, $value));
      }
      #{$property}: $new-space;
    }

    @include respond-to(sm) {
      $new-space: ();
      @each $value in $space {
        $new-space: append($new-space, if(type-of($value) == "number", $value * 0.7, $value));
      }
      #{$property}: $new-space;
    }

    @include respond-to(xs) {
      $new-space: ();
      @each $value in $space {
        $new-space: append($new-space, if(type-of($value) == "number", $value * 0.6, $value));
      }
      #{$property}: $new-space;
    }
  } @else {
    @include respond-to(lg) {
      #{$property}: if(type-of($space) == "number", $space * 0.9, $space);
    }

    @include respond-to(md) {
      #{$property}: if(type-of($space) == "number", $space * 0.8, $space);
    }

    @include respond-to(sm) {
      #{$property}: if(type-of($space) == "number", $space * 0.7, $space);
    }

    @include respond-to(xs) {
      #{$property}: if(type-of($space) == "number", $space * 0.6, $space);
    }
  }
}

// 响应式图片混入
@mixin responsive-image($fit: cover) {
  width: 100%;
  height: 100%;
  object-fit: $fit;
} 